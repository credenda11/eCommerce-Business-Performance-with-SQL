//-----Part 1 DATA PREPARATION-----//

// 1.1 Terdapat 9 dataset baru dengan format csv, maka selanjutnya dibuat 9 tabel pula untuk 
// menyimpan dataset tersebut, dengan menyesuaikan tipe dari setiap kolom berdasarkan pada 
// dataset di file csv

BEGIN;


CREATE TABLE IF NOT EXISTS public.geolocation_dataset
(
    geolocation_zip_code_prefix integer,
    geolocation_lat numeric,
    geolocation_lng numeric,
    geolocation_city character varying COLLATE pg_catalog."default",
    geolocation_state character varying COLLATE pg_catalog."default"
);

CREATE TABLE IF NOT EXISTS public.sellers_dataset
(
    seller_id character varying COLLATE pg_catalog."default",
    seller_zip_code_prefix integer,
    seller_city character varying COLLATE pg_catalog."default",
    seller_state character varying COLLATE pg_catalog."default"
);

CREATE TABLE IF NOT EXISTS public.order_items_dataset
(
    order_id character varying COLLATE pg_catalog."default",
    order_item_id integer,
    product_id character varying COLLATE pg_catalog."default",
    seller_id character varying COLLATE pg_catalog."default",
    shipping_limit_date date,
    price numeric,
    freight_value numeric
);

CREATE TABLE IF NOT EXISTS public.orders_dataset
(
    order_id character varying COLLATE pg_catalog."default",
    customer_id character varying COLLATE pg_catalog."default",
    order_status character varying COLLATE pg_catalog."default",
    order_purchase_timestamp date,
    order_approved_at date,
    order_delivered_carrier_date date,
    order_delivered_customer_date date,
    order_estimated_delivery_date date
);

CREATE TABLE IF NOT EXISTS public.order_reviews_dataset
(
    review_id character varying COLLATE pg_catalog."default",
    order_id character varying COLLATE pg_catalog."default",
    review_score integer,
    review_comment_title character varying COLLATE pg_catalog."default",
    review_comment_message character varying COLLATE pg_catalog."default",
    review_creation_date date,
    review_answer_timestamp date
);

CREATE TABLE IF NOT EXISTS public.product_dataset
(
    product_id character varying COLLATE pg_catalog."default",
    product_category_name character varying COLLATE pg_catalog."default",
    product_name_lenght integer,
    product_description_lenght integer,
    product_photos_qty integer,
    product_weight_g integer,
    product_length_cm integer,
    product_height_cm integer,
    product_width_cm integer
);

CREATE TABLE IF NOT EXISTS public.order_payments_dataset
(
    order_id character varying COLLATE pg_catalog."default",
    payment_sequential integer,
    payment_type character varying COLLATE pg_catalog."default",
    payment_installments integer,
    payment_value numeric
);

CREATE TABLE IF NOT EXISTS public.customers_dataset
(
    customer_id character varying COLLATE pg_catalog."default",
    customer_unique_id character varying COLLATE pg_catalog."default",
    customer_zip_code_prefix integer,
    customer_city character varying COLLATE pg_catalog."default",
    customer_state character varying COLLATE pg_catalog."default"
);

ALTER TABLE IF EXISTS public.geolocation_dataset
    ADD CONSTRAINT geolocation_zip_code_prefix FOREIGN KEY (geolocation_zip_code_prefix)
    REFERENCES public.sellers_dataset (seller_zip_code_prefix) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.order_items_dataset
    ADD CONSTRAINT order_id FOREIGN KEY (order_id)
    REFERENCES public.orders_dataset (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.order_items_dataset
    ADD CONSTRAINT seller_id FOREIGN KEY (seller_id)
    REFERENCES public.sellers_dataset (seller_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.orders_dataset
    ADD CONSTRAINT order_id FOREIGN KEY (order_id)
    REFERENCES public.order_reviews_dataset (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.orders_dataset
    ADD CONSTRAINT customer_id FOREIGN KEY (customer_id)
    REFERENCES public.customers_dataset (customer_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.product_dataset
    ADD CONSTRAINT product_id FOREIGN KEY (product_id)
    REFERENCES public.order_items_dataset (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.order_payments_dataset
    ADD CONSTRAINT order_id FOREIGN KEY (order_id)
    REFERENCES public.orders_dataset (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.customers_dataset
    ADD CONSTRAINT customer_zip_code_prefix FOREIGN KEY (customer_zip_code_prefix)
    REFERENCES public.geolocation_dataset (geolocation_zip_code_prefix) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.customers_dataset
    ADD CONSTRAINT customer_id FOREIGN KEY (customer_id)
    REFERENCES public.orders_dataset (customer_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;



//-----PART 2 ANNUAL CUSTOMER ACTIVITY GROWTH ANALYSIS-----//
// 2.1 Menampilkan rata â€“ rata jumlah customer aktif bulanan (monthly active user) untuk setiap tahun
select year,
		round(avg(mau), 2) as average_mau
from(
select 
	date_part('year', o.order_purchase_timestamp) as year,
	date_part('month', o.order_purchase_timestamp) as month,
	count(distinct c.customer_unique_id) as mau
from orders o 
join customers c on o.customer_id = c.customer_id
group by 1,2 
) subq
group by 1;


//Menampilkan jumlah customer baru (pertama kali melakukan transaksi) pada masing-masing tahun
select 
	date_part('year', first_purchase_time) as year,
	count(1) as new_customers
from (
	select 
		c.customer_unique_id,
		min(o.order_purchase_timestamp) as first_purchase_time
	from orders o 
	join customers c on c.customer_id = o.customer_id
	group by 1
) subq
group by 1;

// 2.2 Menampilkan jumlah customer yang melakukan pembelian lebih dari satu kali (repeat order) pada masing-masing tahun
select 
	year, 
	count(distinct customer_unique_id) as repeating_customers
from (
	select 
		date_part('year', o.order_purchase_timestamp) as year,
		c.customer_unique_id,
		count(1) as purchase_frequency
	from orders o 
	join customers c on c.customer_id = o.customer_id
	group by 1, 2
	having count(1) > 1
) subq
group by 1;

// 2.3 Menampilkan rata-rata jumlah order yang dilakukan customer untuk masing-masing tahun
select 
	year, 
	round(avg(frequency_purchase),3) as avg_orders_per_customers 
from (
	select 
		date_part('year', o.order_purchase_timestamp) as year,
		c.customer_unique_id,
		count(1) as frequency_purchase
	from orders o 
	join customers c on c.customer_id = o.customer_id
	group by 1, 2
) a
group by 1;

// 2.4 Menggabungkan ketiga metrik yang telah berhasil ditampilkan menjadi satu tampilan tabel
with 
calc_mau as (
select 
	year, 
	round(avg(mau), 2) as average_mau
from
(
	select 
		date_part('year', o.order_purchase_timestamp) as year,
		date_part('month', o.order_purchase_timestamp) as month,
		count(distinct c.customer_unique_id) as mau
	from orders o 
	join customers c on o.customer_id = c.customer_id
	group by 1,2 
) subq
group by 1
),
calc_newcust as (
select 
	date_part('year', first_purchase_time) as year,
	count(1) as new_customers
from 
(
	select 
		c.customer_unique_id,
		min(o.order_purchase_timestamp) as first_purchase_time
	from orders o 
	join customers c on c.customer_id = o.customer_id
	group by 1
) subq
group by 1
),
calc_repeat as (
select 
	year, 
	count(distinct customer_unique_id) as repeating_customers
from 
(
	select 
		date_part('year', o.order_purchase_timestamp) as year,
		c.customer_unique_id,
		count(1) as purchase_frequency
	from orders o 
	join customers c on c.customer_id = o.customer_id
	group by 1, 2
	having count(1) > 1
) subq
group by 1 
),
calc_avg_freq as (
select 
	year, 
	round(avg(frequency_purchase),3) as avg_orders_per_customers 
from 
(
	select 
		date_part('year', o.order_purchase_timestamp) as year,
		c.customer_unique_id,
		count(1) as frequency_purchase
	from orders o 
	join customers c on c.customer_id = o.customer_id
	group by 1, 2
) a
group by 1
)

select 
	mau.year, 
	mau.average_mau, 
	newc.new_customers,
	rep.repeating_customers, 
	freq.avg_orders_per_customers
from calc_mau mau 
join calc_newcust newc on mau.year = newc.year
join calc_repeat rep on rep.year = mau.year
join calc_avg_freq freq on freq.year = mau.year;



//-----PART 3 ANNUAL PRODUCT CATEGORY QUALITY-----//

// 3.1 Membuat tabel yang berisi informasi pendapatan/revenue perusahaan total untuk masing-masing tahun
create table total_revenue_per_year as
select 
	date_part('year', o.order_purchase_timestamp) as year,
	sum(revenue_per_order) as revenue
from (
	select 
		order_id, 
		sum(price+freight_value) as revenue_per_order
	from order_items
	group by 1
) subq
join orders o on subq.order_id = o.order_id
where o.order_status = 'delivered'
group by 1;

// 3.2 Membuat tabel yang berisi informasi jumlah cancel order total untuk masing-masing tahun
create table total_cancel_per_year as 
select 
	date_part('year', order_purchase_timestamp) as year,
	count(1) as num_canceled_orders
from orders
where order_status = 'canceled'
group by 1;

// 3.3 Membuat tabel yang berisi nama kategori produk yang memberikan pendapatan total tertinggi untuk masing-masing tahun
create table top_product_category_by_revenue_per_year as 
select 
	year, 
	product_category_name, 
	revenue 
from (
select 
	date_part('year', o.order_purchase_timestamp) as year,
	p.product_category_name,
	sum(oi.price + oi.freight_value) as revenue,
	rank() over(partition by 
date_part('year', o.order_purchase_timestamp) 
 order by 
sum(oi.price + oi.freight_value) desc) as rk
from order_items oi
join orders o on o.order_id = oi.order_id
join products p on p.product_id = oi.product_id
where o.order_status = 'delivered'
group by 1,2) sq
where rk = 1;

// 3.4 Membuat tabel yang berisi nama kategori produk yang memiliki jumlah cancel order terbanyak untuk masing-masing tahun
create table most_canceled_product_category_per_year as 
select 
	year, 
	product_category_name, 
	num_canceled 
from (
select 
	date_part('year', o.order_purchase_timestamp) as year,
	p.product_category_name,
	count(1) as num_canceled,
	rank() over(partition by 
date_part('year', o.order_purchase_timestamp) 
			 order by count(1) desc) as rk
from order_items oi
join orders o on o.order_id = oi.order_id
join products p on p.product_id = oi.product_id
where o.order_status = 'canceled'
group by 1,2) sq
where rk = 1;

// 3.5 Menggabungkan informasi-informasi yang telah didapatkan ke dalam satu tampilan tabel
select 
	a.year,
	a.product_category_name as top_product_category_by_revenue,
	a.revenue as category_revenue,
	b.revenue as year_total_revenue,
	c.product_category_name as most_canceled_product_category,
	c.num_canceled as category_num_canceled,
	d.num_canceled_orders as year_total_num_canceled
from top_product_category_by_revenue_per_year a
join total_revenue_per_year b on a.year = b.year 
join most_canceled_product_category_per_year c on a.year = c.year 
join total_cancel_per_year d on d.year = a.year
order by year asc;



//-----PART 4 ANNUAL PAYMENT TYPE USAGE ANALYSIS-----//

// 4.1 Menampilkan jumlah penggunaan masing-masing tipe pembayaran secara all time diurutkan dari yang terfavorit
select 
	p.payment_type,
	count(1) as num_used
from payments p 
join orders o on o.order_id = p.order_id
group by 1
order by 2 desc;

// Menampilkan detail informasi jumlah penggunaan masing-masing tipe pembayaran untuk masing-masing tahun
with 
tmp as (
select 
	date_part('year', o.order_purchase_timestamp) as year,
	p.payment_type,
	count(1) as num_used
from payments p 
join orders o on o.order_id = p.order_id
group by 1, 2
) 

select *,
	case when year_2017 = 0 then NULL
		else round((year_2018 - year_2017) / year_2017, 2)
	end as pct_change_2017_2018
from (
select 
  payment_type,
  sum(case when year = '2016' then num_used else 0 end) as year_2016,
  sum(case when year = '2017' then num_used else 0 end) as year_2017,
  sum(case when year = '2018' then num_used else 0 end) as year_2018
from tmp 
group by 1) subq
order by 5 desc


